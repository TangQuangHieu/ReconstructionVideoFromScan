/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
** Permission is hereby granted, free of charge, to any person or organization obtaining a copy
** of the software and accompanying documentation (the "Software") to use, reproduce,
** display, distribute, sub-license, execute, and transmit the Software, and to prepare
** derivative works of the Software, and to permit third-parties to whom the Software is
** furnished to do so, in accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License Agreement for
** the Software Development Kit (“EULA”) available at
** https://downloads.blackmagicdesign.com/EULA/Cintel/Cintel-End-User-License-Agreement.pdf; or
**
** (2) if the Software is obtained from any third party, such licensing terms as notified by
** that third party,
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement, including the above
** license grant, this restriction and the following disclaimer, must be included in all copies
** of the Software, in whole or in part, and all derivative works of the Software, unless
** such copies or derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
** DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
** TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
** OTHER DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/developer/product/cintel
**
** -LICENSE-END-
*/


#ifndef BMD_CONST
	#if defined(_MSC_VER)
		#define BMD_CONST __declspec(selectany) static const
	#else
		#define BMD_CONST static const
	#endif
#endif

/* Scanner API */

import "unknwn.idl";
import "stdint.h";

[uuid(191A6C71-B646-40D5-8966-2DEAA4043158),
version(1.0), helpstring("Blackmagic Cintel Scanner API Library")]
library ScannerAPI
{

const uint32_t DESKTOPVIDEO_MINIMUM_VERSION = 0x0C000000;

// Type Declarations

typedef unsigned int BMDScannerTimecodeBCD;
typedef LONGLONG BMDScannerTimeValue;
typedef LONGLONG BMDScannerTimeScale;

// Enumeration Mapping

cpp_quote("typedef uint32_t BMDScannerFrameFlags;")
cpp_quote("typedef uint32_t BMDScannerAdvancedFlag;")
cpp_quote("#if 0")
typedef enum _BMDScannerFrameFlags BMDScannerFrameFlags;
typedef enum _BMDScannerAdvancedFlag BMDScannerAdvancedFlag;
cpp_quote("#endif")

/* Enum BMDScannerAPIInformationID - CintelAPI information ID */

typedef [v1_enum] enum	_BMDScannerAPIInformationID {
	bmdScannerAPIVersion                                                       = /* 'vers' */ 0x76657273,
} BMDScannerAPIInformationID;


/* Enum BMDScannerDisplayMode - Video display modes */

typedef [v1_enum] enum	_BMDScannerDisplayMode {

	/* RAW Modes for Cintel (input only) */

	bmdScannerModeCintelRAW                                                    = /* 'rwci' */ 0x72776369,	// Frame size up to 4096x3072, variable frame rate
	bmdScannerModeCintelCompressedRAW                                          = /* 'rwcc' */ 0x72776363,	// Frame size up to 4096x3072, variable frame rate

	/* Special Modes */

	bmdScannerModeUnknown                                                      = /* 'iunk' */ 0x69756E6B,
} BMDScannerDisplayMode;


/* Enum BMDScannerPixelFormat - Video pixel formats supported for input */

typedef [v1_enum] enum	_BMDScannerPixelFormat {
	bmdScannerFormatUnspecified                                                = 0,

	/* Cintel formats */

	bmdScannerFormat12BitRAWGRBG                                               = /* 'r12p' */ 0x72313270,	// 12-bit RAW data for bayer pattern GRBG
	bmdScannerFormat12BitRAWJPEG                                               = /* 'r16p' */ 0x72313670,	// 12-bit RAW data arranged in tiles and JPEG compressed
	bmdScannerFormat12BitRAWDeprecated                                         = /* 'v210' */ 0x76323130,	// 12-bit RAW loose packing (Deprecated)
} BMDScannerPixelFormat;


/* Enum BMDScannerAudioSampleRate - Audio sample rates supported for output/input */

typedef [v1_enum] enum	_BMDScannerAudioSampleRate {
	bmdScannerAudioSampleRate48kHz                                             = 48000,
} BMDScannerAudioSampleRate;


/* Enum BMDScannerAudioSampleType - Audio sample sizes supported for output/input */

typedef [v1_enum] enum	_BMDScannerAudioSampleType {
	bmdScannerAudioSampleType16bitInteger                                      = 16,
	bmdScannerAudioSampleType32bitInteger                                      = 32,
} BMDScannerAudioSampleType;


/* Enum BMDScannerFrameFlags - Frame flags */

[v1_enum] enum	_BMDScannerFrameFlags {
	bmdScannerFrameFlagDefault                                                 = 0,
	bmdScannerFrameContainsCintelMetadata                                      = 1 << 2,
	bmdScannerFrameHasNoInputSource                                            = 1 << 31,
};


/* Enum BMDScannerTransportCommand - Transport Command */

typedef [v1_enum] enum	_BMDScannerTransportCommand {
	bmdScannerCommandStop                                                      = /* 'Stop' */ 0x53746F70,	// Stop
	bmdScannerCommandRunForward                                                = /* 'RFwd' */ 0x52467764,	// Run Forward
	bmdScannerCommandRunReverse                                                = /* 'RRev' */ 0x52526576,	// Run Reverse
	bmdScannerCommandFastForward                                               = /* 'FFwd' */ 0x46467764,	// Fast Forward
	bmdScannerCommandFastReverse                                               = /* 'FRev' */ 0x46526576,	// Fast Reverse
	bmdScannerCommandInchForward                                               = /* 'IFwd' */ 0x49467764,	// Inch Forward
	bmdScannerCommandInchReverse                                               = /* 'IRev' */ 0x49526576,	// Inch Reverse
	bmdScannerCommandPerfForward                                               = /* 'PFwd' */ 0x50467764,	// Perforation Nudge Forward
	bmdScannerCommandPerfReverse                                               = /* 'PRev' */ 0x50526576,	// Perforation Nudge Reverse
	bmdScannerCommandFramingUp                                                 = /* 'FrUp' */ 0x46725570,	// Frame up
	bmdScannerCommandFramingDown                                               = /* 'FrDn' */ 0x4672446E,	// Frame down
	bmdScannerCommandSlowForward                                               = /* 'SlwF' */ 0x536C7746,	// Play Forward Slowly
	bmdScannerCommandSlowReverse                                               = /* 'SlwR' */ 0x536C7752,	// Play Reverse Slowly
} BMDScannerTransportCommand;


/* Enum BMDScannerFilmType - Film type */

typedef [v1_enum] enum	_BMDScannerFilmType {
	bmdScannerFilmTypeNegative                                                 = /* 'FNEG' */ 0x464E4547,	// Negative
	bmdScannerFilmTypePositive                                                 = /* 'FPOS' */ 0x46504F53,	// Positive
	bmdScannerFilmTypeInterPositive                                            = /* 'FIPO' */ 0x4649504F,	// Inter Positive
	bmdScannerFilmTypeInterNegative                                            = /* 'FINE' */ 0x46494E45,	// Inter Negative
} BMDScannerFilmType;


/* Enum BMDScannerFilmGauge - Film gauge */

typedef [v1_enum] enum	_BMDScannerFilmGauge {
	bmdScannerFilmGauge16mm                                                    = /* '16MM' */ 0x31364D4D,	// 16mm
	bmdScannerFilmGauge35mm2Perf                                               = /* '35M2' */ 0x33354D32,	// 2 perf 35mm
	bmdScannerFilmGauge35mm3Perf                                               = /* '35M3' */ 0x33354D33,	// 3 perf 35mm
	bmdScannerFilmGauge35mm4Perf                                               = /* '35M4' */ 0x33354D34,	// 4 perf 35mm
} BMDScannerFilmGauge;


/* Enum BMDScannerWindType - Wind type */

typedef [v1_enum] enum	_BMDScannerWindType {
	bmdScannerWindTypeA                                                        = /* 'AWnd' */ 0x41576E64,	// A Wind
	bmdScannerWindTypeB                                                        = /* 'BWnd' */ 0x42576E64,	// B Wind
} BMDScannerWindType;


/* Enum BMDScannerCompressionType - Compression type */

typedef [v1_enum] enum	_BMDScannerCompressionType {
	bmdScannerCompressionLossless                                              = /* 'CmLl' */ 0x436D4C6C,	// JPEG LossLess Compression
	bmdScannerCompressionLossy3To1                                             = /* 'C321' */ 0x43333231,	// JPEG 3 to 1 Compression
	bmdScannerCompressionNone                                                  = /* 'CmNn' */ 0x436D4E6E,	// No Compression
} BMDScannerCompressionType;


/* Enum BMDScannerRollType - Wind type */

typedef [v1_enum] enum	_BMDScannerRollType {
	bmdScannerRollTypeCore                                                     = /* 'Core' */ 0x436F7265,	// Core
	bmdScannerRollTypeReel                                                     = /* 'Reel' */ 0x5265656C,	// Reel
} BMDScannerRollType;


/* Enum BMDScannerState - Scanner state */

typedef [v1_enum] enum	_BMDScannerState {
	bmdScannerStateError                                                       = /* 'SErr' */ 0x53457272,	// Error
	bmdScannerStateUnloaded                                                    = /* 'SUld' */ 0x53556C64,	// Unloaded
	bmdScannerStateLoading                                                     = /* 'SLdg' */ 0x534C6467,	// Loading
	bmdScannerStateFramingUp                                                   = /* 'SFrU' */ 0x53467255,	// Framing Up
	bmdScannerStateFramingDown                                                 = /* 'SFrD' */ 0x53467244,	// Framing Down
	bmdScannerStatePerfNudgingUp                                               = /* 'SPNU' */ 0x53504E55,	// Nudging Up
	bmdScannerStatePerfNudgingDown                                             = /* 'SPND' */ 0x53504E44,	// Nudging Down
	bmdScannerStateInchingForward                                              = /* 'SIFw' */ 0x53494677,	// Inching Forward
	bmdScannerStateInchingReverse                                              = /* 'SIRv' */ 0x53495276,	// Inching Reverse
	bmdScannerStateStopped                                                     = /* 'SLdd' */ 0x534C6464,	// Stopped
	bmdScannerStateRunForwards                                                 = /* 'SFwd' */ 0x53467764,	// Run Forwards
	bmdScannerStateRunReverse                                                  = /* 'SRev' */ 0x53526576,	// Run Reverse
	bmdScannerStateShuttleForwards                                             = /* 'SSFw' */ 0x53534677,	// Shuttle Forwards
	bmdScannerStateShuttleReverse                                              = /* 'SSRv' */ 0x53535276,	// Shuttle Reverse
	bmdScannerStateCueingForward                                               = /* 'SCFw' */ 0x53434677,	// Cueing Forwards
	bmdScannerStateCueingReverse                                               = /* 'SCRv' */ 0x53435276,	// Cueing Reverse
	bmdScannerStateStopping                                                    = /* 'SStg' */ 0x53537467,	// Stopping
	bmdScannerStateUnloading                                                   = /* 'SUnl' */ 0x53556E6C,	// Unloading
	bmdScannerStateLEDCalibrating                                              = /* 'SCLD' */ 0x53434C44,	// Calibrating LEDs
	bmdScannerStateCalibratingFixedPatternGain                                 = /* 'SCFG' */ 0x53434647,	// Calibrating FPG
	bmdScannerStateSleeping                                                    = /* 'SSlp' */ 0x53536C70,	// Sleeping
	bmdScannerStateCapturing                                                   = /* 'SCap' */ 0x53436170,	// Capturing
	bmdScannerStateCapturingHDRForward                                         = /* 'SCHF' */ 0x53434846,	// HDR Capturing Forward
	bmdScannerStateCapturingHDRReverse                                         = /* 'SCHR' */ 0x53434852,	// HDR Capturing Reverse
} BMDScannerState;


/* Enum BMDScannerMessage - Scanner errors, warnings and general information messages */

typedef [v1_enum] enum	_BMDScannerMessage {
	bmdScannerUnused                                                           = /* 'ZZZZ' */ 0x5A5A5A5A,	// 
	bmdScannerMessageAmplifierOverTemperature                                  = /* 'HOvT' */ 0x484F7654,	// Amplifier Over Temperature, numParams=1, param1=set/clear
	bmdScannerMessageAmplifierError                                            = /* 'HAmE' */ 0x48416D45,	// Amplifier Error, numParams=1, param1=set/clear
	bmdScannerMessageAmplifierOverCurrent                                      = /* 'AmpC' */ 0x416D7043,	// Amplifier Over Current, numParams=1, param1=set/clear
	bmdScannerMessagePulserError                                               = /* 'PlsE' */ 0x506C7345,	// Pulser Error, numParams=1, param1=set/clear
	bmdScannerMessagePulserOverCurrent                                         = /* 'PlsC' */ 0x506C7343,	// Pulser Over Current, numParams=1, param1=set/clear
	bmdScannerMessageFPGAOverTemperature                                       = /* 'FPGT' */ 0x46504754,	// FPGA Over Temperature, numParams=1, param1=set/clear
	bmdScannerMessageFPGAFanFail                                               = /* 'FPFF' */ 0x46504646,	// FPGA Fan Fail, numParams=1, param1=set/clear
	bmdScannerMessageSensorTemperatureOutOfRange                               = /* 'SnsT' */ 0x536E7354,	// Sensor Over Temperature, numParams=1, param1=set/clear
	bmdScannerMessageSensorFanFail                                             = /* 'SnsF' */ 0x536E7346,	// Sensor Fan Fail, numParams=1, param1=set/clear
	bmdScannerMessageFeedSlipping                                              = /* 'SFVe' */ 0x53465665,	// Feed Slipping, numParams=1, param1=set/clear
	bmdScannerMessageTakeupSlipping                                            = /* 'STVe' */ 0x53545665,	// Takeup Slipping, numParams=1, param1=set/clear
	bmdScannerMessageTransportError                                            = /* 'TnsE' */ 0x546E7345,	// Transport Error, numParams=1, param1=set/clear
	bmdScannerMessageStepperSlipping                                           = /* 'StSl' */ 0x5374536C,	// Stepper Slipping, numParams=1, param1=set/clear
	bmdScannerMessageMagHeadEngaged                                            = /* 'MgDs' */ 0x4D674473,	// Mag Head Engaged Error, numParams=1, param1=set/clear
	bmdScannerMessageMagHeadDisengaged                                         = /* 'MgEn' */ 0x4D67456E,	// Mag Head Disengage Error, numParams=1, param1=set/clear
	bmdScannerMessageProgrammingStarted                                        = /* 'Prgr' */ 0x50726772,	// Programming In Progress, numParams=1, param1=set/clear
	bmdScannerMessageReaderIncompatible                                        = /* 'RdIn' */ 0x5264496E,	// Reader Incompatable, numParams=1, param1=set/clear
	bmdScannerMessageCodecError                                                = /* 'CODE' */ 0x434F4445,	// Codec Error, numParams=1, param1=set/clear
	bmdScannerMessageHDRUnavailable                                            = /* 'NoHD' */ 0x4E6F4844,	// HDR Unavailable, numParams=1, param1=set/clear
	bmdScannerMessageImageClipped                                              = /* 'ImCl' */ 0x496D436C,	// Image In Clip, numParams=1, param1=set/clear
	bmdScannerMessageInfillClipped                                             = /* 'InCl' */ 0x496E436C,	// Perf Infill In Clip, numParams=1, param1=set/clear
	bmdScannerMessageFilmConfigurationChanged                                  = /* 'FlCf' */ 0x466C4366,	// Film Configuration Changed, numParams=1, param1=set/clear
	bmdScannerMessageTransportParametersChanged                                = /* 'TpPa' */ 0x54705061,	// Transport Parameter Changed, numParams=1, param1=set/clear
	bmdScannerMessageColorPropertiesChanged                                    = /* 'ClPp' */ 0x436C5070,	// Color Properties Changed, numParams=1, param1=set/clear
	bmdScannerMessageImageStabilizerChanged                                    = /* 'ImSt' */ 0x496D5374,	// Image Stabilizer Changed, numParams=1, param1=set/clear
	bmdScannerMessageCaptureSettingsChanged                                    = /* 'CpSt' */ 0x43705374,	// Capture Settings Changed, numParams=1, param1=set/clear
	bmdScannerMessageReaderSettingsChanged                                     = /* 'RdSt' */ 0x52645374,	// Reader Settings Changed, numParams=1, param1=set/clear
	bmdScannerMessageAudioSelectSettingsChanged                                = /* 'ASSt' */ 0x41535374,	// Audio Select Settings Changed, numParams=1, param1=set/clear
} BMDScannerMessage;


/* Enum BMDScannerMessageSeverity - Severity levels for scanner messages */

typedef [v1_enum] enum	_BMDScannerMessageSeverity {
	bmdScannerMessageSeverityError                                             = /* 'Eror' */ 0x45726F72,	// Error Message
	bmdScannerMessageSeverityWarning                                           = /* 'Warn' */ 0x5761726E,	// Warning Message
	bmdScannerMessageSeverityInformation                                       = /* 'Info' */ 0x496E666F,	// Information Only Message
} BMDScannerMessageSeverity;


/* Enum BMDScannerCalibrationStatus - Calibration status */

typedef [v1_enum] enum	_BMDScannerCalibrationStatus {
	bmdScannerCalibrationNotRun                                                = /* 'NtRn' */ 0x4E74526E,	// LED Calibration not yet run
	bmdScannerCalibrationRunning                                               = /* 'Rnng' */ 0x526E6E67,	// LED Calibration currently running
	bmdScannerCalibrationComplete                                              = /* 'Cmpl' */ 0x436D706C,	// LED Calibration completed successfully
	bmdScannerCalibrationCompromised                                           = /* 'Cmpr' */ 0x436D7072,	// LED Calibration completed but desired levels not achieved
	bmdScannerCalibrationFailed                                                = /* 'Flld' */ 0x466C6C64,	// LED Calibration failed
} BMDScannerCalibrationStatus;


/* Enum BMDReaderMode - Reader */

typedef [v1_enum] enum	_BMDReaderMode {
	bmdReaderModeKeyKodePerfs                                                 = /* 'MdKK' */ 0x4D644B4B,	// KeyKode in Perfs (SMPTE)
	bmdReaderModeKeyKodeFrames                                                = /* 'MdKf' */ 0x4D644B66,	// KeyKode in Frames
	bmdReaderModeAudio                                                        = /* 'MdAu' */ 0x4D644175,	// Audio wide slit mode
	bmdReaderModeAudioNarrowSlit                                              = /* 'MdAN' */ 0x4D64414E,	// Audio narrow slit mode (shrunken film)
	bmdReaderModeAudioMagnetic                                                = /* 'MdAM' */ 0x4D64414D,	// Magnetic audio mode
} BMDReaderMode;


/* Enum BMDReaderAudioMode - Reader audio mode */

typedef [v1_enum] enum	_BMDReaderAudioMode {
	bmdReaderAudioModeMono                                                    = /* 'AMMo' */ 0x414D4D6F,	// Stereo channels combined and output on both channels
	bmdReaderAudioModeStereo                                                  = /* 'AMSt' */ 0x414D5374,	// Stereo
} BMDReaderAudioMode;


/* Enum BMDScannerCaptureMode - Capture Mode */

typedef [v1_enum] enum	_BMDScannerCaptureMode {
	bmdScannerCaptureModePreview                                               = /* 'CpNn' */ 0x43704E6E,	// Preview
	bmdScannerCaptureModeNormal                                                = /* 'CpNl' */ 0x43704E6C,	// Normal Exposure
	bmdScannerCaptureModeHigh                                                  = /* 'CHFw' */ 0x43484677,	// High Exposure
} BMDScannerCaptureMode;


/* Enum BMDScannerAudioSelectSource - Audio Select Source */

typedef [v1_enum] enum	_BMDScannerAudioSelectSource {
	bmdScannerAudioSourceNone                                                  = /* 'ASNo' */ 0x41534E6F,	// No audio source
	bmdScannerAudioSourceReader                                                = /* 'ASRe' */ 0x41535265,	// Reader audio source
	bmdScannerAudioSourceExternal                                              = /* 'ASEx' */ 0x41534578,	// External audio source
} BMDScannerAudioSelectSource;


/* Enum BMDScannerExternalAudioFormat - External Audio Format */

typedef [v1_enum] enum	_BMDScannerExternalAudioFormat {
	bmdScannerExternalAudioAnalog                                              = /* 'EAAn' */ 0x4541416E,	// External audio analog format
	bmdScannerExternalAudioAES                                                 = /* 'EAAE' */ 0x45414145,	// External audio AES format
} BMDScannerExternalAudioFormat;


/* Enum BMDScannerAdvancedFlag - Advanced Flag */

[v1_enum] enum	_BMDScannerAdvancedFlag {
	bmdScannerFlagsFullStepper                                                 = 1 << 0,	// Drive motor full strength, noisier but might help with some films
	bmdScannerFlagsRunRewind                                                   = 1 << 2,	// Rewind at end of reel instead of run off
};


/* Enum BMDScannerSyncLTCConfig - Bi-Phase Sync or LTC output select/configuration */

typedef [v1_enum] enum	_BMDScannerSyncLTCConfig {
	bmdScannerSync1ppf                                                         = /* 'S1pp' */ 0x53317070,	// Bi-phase sync 1 pulse per frame
	bmdScannerSync2ppf                                                         = /* 'S2pp' */ 0x53327070,	// Bi-phase sync 2 pulses per frame
	bmdScannerSync5ppf                                                         = /* 'S5pp' */ 0x53357070,	// Bi-phase sync 5 pulses per frame
	bmdScannerSync10ppf                                                        = /* 'SApp' */ 0x53417070,	// Bi-phase sync 10 pulses per frame
	bmdScannerLTCFrameSync                                                     = /* 'LTFS' */ 0x4C544653,	// Linear TimeCode output once per frame
	bmdScannerLTCFreeRun                                                       = /* 'LTFR' */ 0x4C544652,	// Linear TimeCode output at film frame rate
	bmdScannerSyncLTCUnsupported                                               = /* 'UnSp' */ 0x556E5370,	// Unsupported feature
} BMDScannerSyncLTCConfig;


/* Enum BMDScannerFrameMetadataID - Scanner Frame Metadata ID */

typedef [v1_enum] enum	_BMDScannerFrameMetadataID {
	bmdScannerFrameMetadataCintelFilmType                                      = /* 'cfty' */ 0x63667479,	// Current film type
	bmdScannerFrameMetadataCintelFilmGauge                                     = /* 'cfga' */ 0x63666761,	// Current film gauge
	bmdScannerFrameMetadataCintelKeykodeLow                                    = /* 'ckkl' */ 0x636B6B6C,	// Raw keykode value - low 64 bits
	bmdScannerFrameMetadataCintelKeykodeHigh                                   = /* 'ckkh' */ 0x636B6B68,	// Raw keykode value - high 64 bits
	bmdScannerFrameMetadataCintelTile1Size                                     = /* 'ct1s' */ 0x63743173,	// Size in bytes of compressed raw tile 1
	bmdScannerFrameMetadataCintelTile2Size                                     = /* 'ct2s' */ 0x63743273,	// Size in bytes of compressed raw tile 2
	bmdScannerFrameMetadataCintelTile3Size                                     = /* 'ct3s' */ 0x63743373,	// Size in bytes of compressed raw tile 3
	bmdScannerFrameMetadataCintelTile4Size                                     = /* 'ct4s' */ 0x63743473,	// Size in bytes of compressed raw tile 4
	bmdScannerFrameMetadataCintelImageWidth                                    = /* 'IWPx' */ 0x49575078,	// Width in pixels of image
	bmdScannerFrameMetadataCintelImageHeight                                   = /* 'IHPx' */ 0x49485078,	// Height in pixels of image
	bmdScannerFrameMetadataCintelFilmFrameRate                                 = /* 'cffr' */ 0x63666672,	// Film frame rate
	bmdScannerFrameMetadataCintelLinearMaskingRedInRed                         = /* 'mrir' */ 0x6D726972,	// Red in red linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingGreenInRed                       = /* 'mgir' */ 0x6D676972,	// Green in red linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingBlueInRed                        = /* 'mbir' */ 0x6D626972,	// Blue in red linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingRedInGreen                       = /* 'mrig' */ 0x6D726967,	// Red in green linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingGreenInGreen                     = /* 'mgig' */ 0x6D676967,	// Green in green linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingBlueInGreen                      = /* 'mbig' */ 0x6D626967,	// Blue in green linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingRedInBlue                        = /* 'mrib' */ 0x6D726962,	// Red in blue linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingGreenInBlue                      = /* 'mgib' */ 0x6D676962,	// Green in blue linear masking parameter
	bmdScannerFrameMetadataCintelLinearMaskingBlueInBlue                       = /* 'mbib' */ 0x6D626962,	// Blue in blue linear masking parameter
	bmdScannerFrameMetadataCintelLogMaskingRedInRed                            = /* 'mlrr' */ 0x6D6C7272,	// Red in red log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingGreenInRed                          = /* 'mlgr' */ 0x6D6C6772,	// Green in red log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingBlueInRed                           = /* 'mlbr' */ 0x6D6C6272,	// Blue in red log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingRedInGreen                          = /* 'mlrg' */ 0x6D6C7267,	// Red in green log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingGreenInGreen                        = /* 'mlgg' */ 0x6D6C6767,	// Green in green log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingBlueInGreen                         = /* 'mlbg' */ 0x6D6C6267,	// Blue in green log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingRedInBlue                           = /* 'mlrb' */ 0x6D6C7262,	// Red in blue log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingGreenInBlue                         = /* 'mlgb' */ 0x6D6C6762,	// Green in blue log masking parameter
	bmdScannerFrameMetadataCintelLogMaskingBlueInBlue                          = /* 'mlbb' */ 0x6D6C6262,	// Blue in blue log masking parameter
	bmdScannerFrameMetadataCintelOffsetToApplyHorizontal                       = /* 'otah' */ 0x6F746168,	// Horizontal offset (pixels) to be applied to image
	bmdScannerFrameMetadataCintelOffsetToApplyVertical                         = /* 'otav' */ 0x6F746176,	// Vertical offset (pixels) to be applied to image
	bmdScannerFrameMetadataCintelSkewToApply                                   = /* 'Skew' */ 0x536B6577,	// Skew (pixels) to be applied to image
	bmdScannerFrameMetadataCintelGainRed                                       = /* 'LfRd' */ 0x4C665264,	// Red gain parameter to apply after log
	bmdScannerFrameMetadataCintelGainGreen                                     = /* 'LfGr' */ 0x4C664772,	// Green gain parameter to apply after log
	bmdScannerFrameMetadataCintelGainBlue                                      = /* 'LfBl' */ 0x4C66426C,	// Blue gain parameter to apply after log
	bmdScannerFrameMetadataCintelLiftRed                                       = /* 'GnRd' */ 0x476E5264,	// Red lift parameter to apply after log and gain
	bmdScannerFrameMetadataCintelLiftGreen                                     = /* 'GnGr' */ 0x476E4772,	// Green lift parameter to apply after log and gain
	bmdScannerFrameMetadataCintelLiftBlue                                      = /* 'GnBl' */ 0x476E426C,	// Blue lift parameter to apply after log and gain
	bmdScannerFrameMetadataCintelHDRGainRed                                    = /* 'HGRd' */ 0x48475264,	// Red gain parameter to apply to linear data for HDR Combine
	bmdScannerFrameMetadataCintelHDRGainGreen                                  = /* 'HGGr' */ 0x48474772,	// Green gain parameter to apply to linear data for HDR Combine
	bmdScannerFrameMetadataCintelHDRGainBlue                                   = /* 'HGBl' */ 0x4847426C,	// Blue gain parameter to apply to linear data for HDR Combine
} BMDScannerFrameMetadataID;


// Forward Declarations

interface IScannerAPIInformation;
interface IScanner;
interface IScannerDiscovery;
interface IScannerInput;
interface IScannerInputFrame;
interface IScannerInputCallback;
interface IScannerDeviceNotificationCallback;
interface IScannerNotifications;
interface IScannerFilmConfiguration;
interface IScannerTransport;
interface IScannerColorProperties;
interface IScannerImageStabilizer;
interface IScannerCapture;
interface IScannerAudioSelect;
interface IScannerReader;

/* Interface IScannerAPIInformation - ScannerAPI attribute interface */

[
	object,
	uuid(C341960D-9F21-4977-8714-C1C6E38E3FD0),
	helpstring("ScannerAPI attribute interface")
] interface IScannerAPIInformation : IUnknown
{
	HRESULT GetFlag([in] BMDScannerAPIInformationID cfgID, [out] BOOL *value);
	HRESULT GetInt([in] BMDScannerAPIInformationID cfgID, [out] int64_t *value);
	HRESULT GetFloat([in] BMDScannerAPIInformationID cfgID, [out] double *value);
	HRESULT GetString([in] BMDScannerAPIInformationID cfgID, [out] BSTR *value);
};

/* Interface IScanner - represents a Scanner device */

[
	object,
	uuid(A0EDC95F-95B2-472C-965F-F91B4A7941A4),
	helpstring("represents a Scanner device")
] interface IScanner : IUnknown
{
	HRESULT InstallScannerNotifications([in] IScannerNotifications *scannerNotificationCallback);
	HRESULT UninstallScannerNotifications([in] IScannerNotifications *scannerNotificationCallback);
	HRESULT GetDeckLinkDevice([out] IUnknown **deckLinkDevice);
	HRESULT GetModelName([out] BSTR *modelName);
	HRESULT GetDisplayName([out] BSTR *displayName); // Analogous to the IDeckLink::GetDisplayName() method
	HRESULT GetTemperature([out] uint32_t *temperature); // Temperature is in degrees celsius
};

/* Interface IScannerDiscovery - Scanner device discovery. Methods in this interface are not thread-safe. */

[
	object,
	uuid(747E5F2E-A0E0-41B2-B567-D539B9FD93C9),
	helpstring("Scanner device discovery. Methods in this interface are not thread-safe.")
] interface IScannerDiscovery : IUnknown
{
	HRESULT InstallDeviceNotifications([in] IScannerDeviceNotificationCallback *deviceNotificationCallback); // The callback will only be set if the return value is S_OK.
	HRESULT UninstallDeviceNotifications(void); // Any current callback will always be cleared by this call, regardless of the return value. Upon return, it is guaranteed that no callback is still in progress.
};

/* Interface IScannerInput - Created by QueryInterface from IScanner. */

[
	object,
	uuid(CDAA2D18-C6BB-4189-8EFD-C411A8FAB9B1),
	helpstring("Created by QueryInterface from IScanner.")
] interface IScannerInput : IUnknown
{
	HRESULT DoesSupportVideoMode([in] BMDScannerDisplayMode requestedMode, [in] BMDScannerPixelFormat requestedPixelFormat, [out] BOOL *supported);

	/* Video Input */

	HRESULT EnableVideoInput([in] BMDScannerDisplayMode displayMode, [in] BMDScannerPixelFormat pixelFormat);
	HRESULT DisableVideoInput(void);
	HRESULT GetAvailableVideoFrameCount([out] uint32_t *availableFrameCount);

	/* Audio Input */

	HRESULT EnableAudioInput([in] BMDScannerAudioSampleType sampleType);
	HRESULT DisableAudioInput(void);
	HRESULT GetAvailableAudioSampleFrameCount([out] uint32_t *availableSampleFrameCount);

	/* Input Control */

	HRESULT StartStreams(void);
	HRESULT StopStreams(void);
	HRESULT PauseStreams(void);
	HRESULT FlushStreams(void);
	HRESULT SetCallback([in] IScannerInputCallback *theCallback);

	/* Hardware Timing */

	HRESULT GetHardwareReferenceClock([in] BMDScannerTimeScale desiredTimeScale, [out] BMDScannerTimeValue *hardwareTime, [out] BMDScannerTimeValue *timeInFrame, [out] BMDScannerTimeValue *ticksPerFrame);
};

/* Interface IScannerInputFrame - Provided by the IScannerInputCallback frame arrival callback. */

[
	object,
	uuid(A2EB0F08-613A-4406-BA0A-97E83BBCB77D),
	helpstring("Provided by the IScannerInputCallback frame arrival callback.")
] interface IScannerInputFrame : IUnknown
{
	HRESULT GetMetadataInt([in] BMDScannerFrameMetadataID metadataID, [out] int64_t *value);
	HRESULT GetMetadataFloat([in] BMDScannerFrameMetadataID metadataID, [out] double *value);
	HRESULT GetMetadataFlag([in] BMDScannerFrameMetadataID metadataID, [out] BOOL* value);
	HRESULT GetMetadataString([in] BMDScannerFrameMetadataID metadataID, [out] BSTR *value);
	BOOL HasVideo(void);
	uint32_t GetWidth(void);
	uint32_t GetHeight(void);
	uint32_t GetRowBytes(void);
	BMDScannerPixelFormat GetPixelFormat(void);
	BMDScannerFrameFlags GetFlags(void);
	HRESULT GetBytes([out] void **buffer);
	BMDScannerTimecodeBCD GetTimecode(void);
	BMDScannerDisplayMode GetDisplayMode(void);
	HRESULT GetStreamTime([out] BMDScannerTimeValue *frameTime, [out] BMDScannerTimeValue *frameDuration, [in] BMDScannerTimeScale timeScale);
	HRESULT GetHardwareReferenceTimestamp([in] BMDScannerTimeScale timeScale, [out] BMDScannerTimeValue *frameTime, [out] BMDScannerTimeValue *frameDuration);
	BOOL HasAudio(void);
	uint32_t GetAudioSampleFrameCount(void);
	HRESULT GetAudioBytes([out] void **buffer);
};

/* Interface IScannerInputCallback - Frame arrival callback. */

[
	object,
	uuid(E9397F80-50A8-4560-83A0-DE46CC4F06B2),
	helpstring("Frame arrival callback.")
] interface IScannerInputCallback : IUnknown
{
	HRESULT ScannerInputFrameArrived([in] IScannerInputFrame *videoFrame);
	HRESULT ScannerInputFormatChanged([in] BMDScannerDisplayMode newDisplayMode);
};

/* Interface IScannerDeviceNotificationCallback - Scanner device arrival/removal notification callbacks */

[
	object,
	uuid(A2A963D1-9671-4099-8A65-EFE56EF9983B),
	helpstring("Scanner device arrival/removal notification callbacks")
] interface IScannerDeviceNotificationCallback : IUnknown
{
	HRESULT ScannerDeviceArrived([in] IScanner *scannerDevice); // The return value will be ignored
	HRESULT ScannerDeviceRemoved([in] IScanner *scannerDevice); // The return value will be ignored
};

/* Interface IScannerNotifications - Scanner system state change and error notifications */

[
	object,
	uuid(77D127A3-DF50-42D3-A6DE-1A8A5AFD2C57),
	helpstring("Scanner system state change and error notifications")
] interface IScannerNotifications : IUnknown
{
	HRESULT SystemStateChanged([in] BMDScannerState state);
	HRESULT MessageEvent([in] BMDScannerMessage eventCode, [in] BMDScannerMessageSeverity severity, [in] uint32_t numParams, [in] uint64_t *params); // numParams specifies how many entries are in params, see BMDScannerMessage for more details. If it is zero, params can be a NULL pointer.
};

/* Interface IScannerFilmConfiguration - Film configuration, query from IScanner */

[
	object,
	uuid(350F33F1-E5A5-456B-854B-A05A2F5E56C5),
	helpstring("Film configuration, query from IScanner")
] interface IScannerFilmConfiguration : IUnknown
{
	HRESULT SetFilmType([in] BMDScannerFilmType filmType);
	HRESULT GetFilmType([out] BMDScannerFilmType *filmType);
	HRESULT GetDefaultFilmType([out] BMDScannerFilmType *filmType);
	HRESULT SetFilmGauge([in] BMDScannerFilmGauge filmGauge);
	HRESULT GetFilmGauge([out] BMDScannerFilmGauge *filmGauge);
	HRESULT GetDefaultFilmGauge([out] BMDScannerFilmGauge *filmGauge);
	HRESULT GetFilmGaugeAvailable([in] BMDScannerFilmGauge filmGauge, [out] BOOL *available);
	HRESULT SetFilmFrameRate([in] uint16_t framesPerSecond);
	HRESULT GetFilmFrameRate([out] uint16_t *framesPerSecond);
	HRESULT GetDefaultFilmFrameRate([out] uint16_t *framesPerSecond);
	HRESULT GetMinimumFilmFrameRate([out] uint16_t *framesPerSecond);
	HRESULT GetMaximumFilmFrameRate([out] uint16_t *framesPerSecond);
	HRESULT SetFeedWind([in] BMDScannerWindType wind);
	HRESULT GetFeedWind([out] BMDScannerWindType *wind);
	HRESULT GetDefaultFeedWind([out] BMDScannerWindType *wind);
	HRESULT SetTakeupWind([in] BMDScannerWindType wind);
	HRESULT GetTakeupWind([out] BMDScannerWindType *wind);
	HRESULT GetDefaultTakeupWind([out] BMDScannerWindType *wind);
	HRESULT SetFeedRollType([in] BMDScannerRollType roll);
	HRESULT GetFeedRollType([out] BMDScannerRollType *roll);
	HRESULT GetDefaultFeedRollType([out] BMDScannerRollType *roll);
	HRESULT SetTakeupRollType([in] BMDScannerRollType roll);
	HRESULT GetTakeupRollType([out] BMDScannerRollType *roll);
	HRESULT GetDefaultTakeupRollType([out] BMDScannerRollType *roll);
};

/* Interface IScannerTransport - transport control, query from IScanner */

[
	object,
	uuid(6646375D-9995-43EA-A33D-3EA957FBAC02),
	helpstring("transport control, query from IScanner")
] interface IScannerTransport : IUnknown
{
	HRESULT SetRunSpeed([in] uint16_t runSpeed /* fps */);
	HRESULT GetRunSpeed([out] uint16_t *runSpeed /* fps */);
	HRESULT GetMinimumRunSpeed([out] uint16_t *minimumRunSpeed /* fps */);
	HRESULT GetMaximumRunSpeed([out] uint16_t *maximumRunSpeed /* fps */);
	HRESULT GetDefaultRunSpeed([out] uint16_t *defaultRunSpeed /* fps */);
	HRESULT SetShuttleSpeed([in] uint16_t shuttleSpeed /* fps */);
	HRESULT GetShuttleSpeed([out] uint16_t *shuttleSpeed /* fps */);
	HRESULT GetMinimumShuttleSpeed([out] uint16_t *minimumShuttleSpeed /* fps */);
	HRESULT GetMaximumShuttleSpeed([out] uint16_t *maximumShuttleSpeed /* fps */);
	HRESULT GetDefaultShuttleSpeed([out] uint16_t *defaultShuttleSpeed /* fps */);
	HRESULT SetAcceleration([in] uint16_t acceleration /* fpsps */);
	HRESULT GetAcceleration([out] uint16_t *acceleration /* fpsps */);
	HRESULT GetMinimumAcceleration([out] uint16_t *minimumAcceleration /* fpsps */);
	HRESULT GetMaximumAcceleration([out] uint16_t *maximumAcceleration /* fpsps */);
	HRESULT GetDefaultAcceleration([out] uint16_t *defaultAcceleration /* fpsps */);
	HRESULT SetFilmTension([in] uint16_t tension /* normalised value */);
	HRESULT GetFilmTension([out] uint16_t *tension /* normalised value */);
	HRESULT GetMinimumFilmTension([out] uint16_t *minimumTension /* normalised value */);
	HRESULT GetMaximumFilmTension([out] uint16_t *maximumTension /* normalised value */);
	HRESULT GetDefaultFilmTension([out] uint16_t *defaultTension /* normalised value */);
	HRESULT SetTimecode([in] BMDScannerTimecodeBCD timecodeBcd);
	HRESULT GetTimecode([out] BMDScannerTimecodeBCD *timecodeBcd);
	HRESULT SetCue([in] BMDScannerTimecodeBCD timecodeBcd);
	HRESULT SendCommand([in] BMDScannerTransportCommand command);
	HRESULT SetCaptureMode([in] BMDScannerCaptureMode mode /* request scanner to enter specified capture mode (may not happen immediately - use SystemStateChanged notifier to check capture state) */);
	HRESULT GetCaptureMode([out] BMDScannerCaptureMode *mode);
	HRESULT GetDefaultCaptureMode([out] BMDScannerCaptureMode *mode);
	HRESULT GetFeedFramesRemaining([out] uint32_t *frames);
	HRESULT GetTakeupFramesRemaining([out] uint32_t *frames);
	HRESULT GetPreroll([out] uint32_t *frames);
	HRESULT SetAdvancedFlags([in] uint32_t flags /* flags */);
	HRESULT GetAdvancedFlags([out] uint32_t *flags /* flags */);
	HRESULT GetHDRCaptureAvailable([out] BOOL *available);
};

/* Interface IScannerColorProperties - Adjust color correction */

[
	object,
	uuid(3BD9411E-9A5E-47F1-845E-2188DCCAC741),
	helpstring("Adjust color correction")
] interface IScannerColorProperties : IUnknown
{
	HRESULT SetLEDIllumination([in] uint16_t red, [in] uint16_t green, [in] uint16_t blue);
	HRESULT GetLEDIllumination([out] uint16_t *red, [out] uint16_t *green, [out] uint16_t *blue);
	HRESULT GetDefaultLEDIllumination([out] uint16_t *red, [out] uint16_t *green, [out] uint16_t *blue);
	HRESULT StartFixedPatternGainCalibration(void);
	HRESULT GetFixedPatternGainCalibrated([out] BOOL *calibrated);
	HRESULT StartLEDCalibration(void);
	HRESULT GetLEDCalibrationStatus([out] BMDScannerCalibrationStatus *status);
	HRESULT GetHDRCalibrationStatus([out] BMDScannerCalibrationStatus *status);
	HRESULT GetFixedPatternGainCalibrationStatus([out] BMDScannerCalibrationStatus *status);
	HRESULT SetFocusPeakingEnable([in] BOOL enable);
	HRESULT GetFocusPeakingEnable([out] BOOL *enable);
	HRESULT GetDefaultFocusPeakingEnable([out] BOOL *enable);
	HRESULT SetEnableHDRMode([in] BOOL enable);
	HRESULT GetEnableHDRMode([out] BOOL *enable);
	HRESULT GetDefaultEnableHDRMode([out] BOOL *enable);
};

/* Interface IScannerImageStabilizer - image stabilization, query from IScanner */

[
	object,
	uuid(702C52DC-E4F1-4FB1-8C4E-9DC02BFED2DB),
	helpstring("image stabilization, query from IScanner")
] interface IScannerImageStabilizer : IUnknown
{
	HRESULT SetStabilizationEnable([in] BOOL enable);
	HRESULT GetStabilizationEnable([out] BOOL *enable);
	HRESULT GetDefaultStabilizationEnable([out] BOOL *enable);
	HRESULT SetStabilizationEnableXY([in] BOOL enableX, [in] BOOL enableY);
	HRESULT GetStabilizationEnableXY([out] BOOL *enableX, [out] BOOL *enableY);
	HRESULT GetDefaultStabilizationEnableXY([out] BOOL *enableX, [out] BOOL *enableY);
	HRESULT SetStabilizationViewRegion([in] BOOL enable);
	HRESULT GetStabilizationViewRegion([out] BOOL *enable);
	HRESULT GetDefaultStabilizationViewRegion([out] BOOL *enable);
	HRESULT SetStabilizationOffsetX([in] int16_t stabilizationOffsetX /* pixels */);
	HRESULT GetStabilizationOffsetX([out] int16_t *stabilizationOffsetX /* pixels */);
	HRESULT GetMinimumStabilizationOffsetX([out] int16_t *stabilizationOffsetX /* pixels */);
	HRESULT GetMaximumStabilizationOffsetX([out] int16_t *stabilizationOffsetX /* pixels */);
	HRESULT GetDefaultStabilizationOffsetX([out] int16_t *stabilizationOffsetX /* pixels */);
};

/* Interface IScannerCapture - capture type, query from IScanner */

[
	object,
	uuid(12B23298-5ABC-4B48-9A22-CEB11630D17C),
	helpstring("capture type, query from IScanner")
] interface IScannerCapture : IUnknown
{
	HRESULT SetCompressionType([in] BMDScannerCompressionType type);
	HRESULT GetCompressionType([out] BMDScannerCompressionType *type);
	HRESULT GetDefaultCompressionType([out] BMDScannerCompressionType *type);
};

/* Interface IScannerAudioSelect - External audio type, query from IScanner */

[
	object,
	uuid(778680C3-3C05-40D9-B855-0FDC588182BF),
	helpstring("External audio type, query from IScanner")
] interface IScannerAudioSelect : IUnknown
{
	HRESULT SetAudioSelectSource([in] BMDScannerAudioSelectSource audioSelectSource);
	HRESULT GetAudioSelectSource([out] BMDScannerAudioSelectSource *audioSelectSource);
	HRESULT GetDefaultAudioSelectSource([out] BMDScannerAudioSelectSource *audioSelectSource);
	HRESULT GetAudioSourceAvailable([in] BMDScannerAudioSelectSource audioSource, [out] BOOL *available);
	HRESULT SetExternalAudioFormat([in] BMDScannerExternalAudioFormat externalAudioFormat);
	HRESULT GetExternalAudioFormat([out] BMDScannerExternalAudioFormat *externalAudioFormat);
	HRESULT GetDefaultExternalAudioFormat([out] BMDScannerExternalAudioFormat *externalAudioFormat);
	HRESULT SetSyncConfiguration([in] BMDScannerSyncLTCConfig syncltc);
	HRESULT GetSyncConfiguration([out] BMDScannerSyncLTCConfig *syncltc);
	HRESULT GetDefaultSyncConfiguration([out] BMDScannerSyncLTCConfig *syncltc);
};

/* Interface IScannerReader - Reader accessory configuration, mounted on left hand side, query from IScanner */

[
	object,
	uuid(18BED793-3D95-4332-B28B-E5F69B87DB42),
	helpstring("Reader accessory configuration, mounted on left hand side, query from IScanner")
] interface IScannerReader : IUnknown
{
	HRESULT GetReaderPresent([out] BOOL* present);
	HRESULT GetReaderMode([out] BMDReaderMode* mode);
	HRESULT GetDefaultReaderMode([out] BMDReaderMode* mode);
	HRESULT SetReaderMode([in] BMDReaderMode mode);
	HRESULT GetMagneticAudioAllowed([out] BOOL* magneticAudioAllowed);
	HRESULT SetAudioMode([in] BMDReaderAudioMode audioMode);
	HRESULT GetAudioMode([out] BMDReaderAudioMode* audioMode);
	HRESULT GetDefaultAudioMode([out] BMDReaderAudioMode* audioMode);
	HRESULT GetAudioPresent([out] BOOL *present);
};

/* Coclasses */

importlib("stdole2.tlb");

[
	uuid(B60B1DC4-CF79-4478-987B-5B962202B71B),
	helpstring("CScannerDiscovery Class")
] coclass CScannerDiscovery
{
	[default] interface IScannerDiscovery;
};

[
	uuid(EAA3246E-B9C8-4436-ADE2-44702400CEB8),
	helpstring("CScannerAPIInformation Class")
] coclass CScannerAPIInformation
{
	[default] interface IScannerAPIInformation;
};


/* Not strictly IDL, but provides the function prototype for the contents
   of the ScannerAPIDispatch.cpp file to be consistent with the API defined
   for other platforms. */
cpp_quote("EXTERN_C IScannerDiscovery* CreateScannerDiscoveryInstance(void);")
cpp_quote("EXTERN_C IScannerAPIInformation* CreateScannerAPIInformationInstance(void);")

}
