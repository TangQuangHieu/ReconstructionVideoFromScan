/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
** Permission is hereby granted, free of charge, to any person or organization obtaining a copy
** of the software and accompanying documentation (the "Software") to use, reproduce,
** display, distribute, sub-license, execute, and transmit the Software, and to prepare
** derivative works of the Software, and to permit third-parties to whom the Software is
** furnished to do so, in accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License Agreement for
** the Software Development Kit (“EULA”) available at
** https://downloads.blackmagicdesign.com/EULA/Cintel/Cintel-End-User-License-Agreement.pdf; or
**
** (2) if the Software is obtained from any third party, such licensing terms as notified by
** that third party,
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement, including the above
** license grant, this restriction and the following disclaimer, must be included in all copies
** of the Software, in whole or in part, and all derivative works of the Software, unless
** such copies or derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
** DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
** TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
** OTHER DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/developer/product/cintel
**
** -LICENSE-END-
*/

#include "pch.h"
#include "KeyKode.h"

const Keykode::FilmManufacturerEntry Keykode::manufacturerData[] =
{
	{  0, Keykode::kManufacturerORWO,	"ORWO", "", "", "" },
	{ 10, Keykode::kManufacturerORWO,	"ORWO", "", "", "" },
	{  1, Keykode::kManufacturerAGFA,	"AGFA", "", "", "" },
	{ 11, Keykode::kManufacturerAGFA,	"AGFA", "", "", "" },
	{  2, Keykode::kManufacturerKodak,	"Kodak", "52", "72", "SO-" },
	{ 12, Keykode::kManufacturerKodak,	"Kodak", "52", "72", "SO-" },
	{ 22, Keykode::kManufacturerKodak,	"Kodak", "52", "72", "SO-" },
	{  3, Keykode::kManufacturerFUJI,	"FUJI", "85", "86", "" },
	{ 13, Keykode::kManufacturerFUJI,	"FUJI", "85", "86", "" },
	{ 23, Keykode::kManufacturerFUJI,	"FUJI", "85", "86", "" },
};

const Keykode::FilmManufacturerEntry Keykode::unknownManufacturerEntry =
{
	99, Keykode::kManufacturerUnknown, ""
};

const Keykode::FilmTypeEntry Keykode::orwoStockData[] =
{
	{ 29, "OU", "UN54", "100 ASA" },
	{ 37, "OU", "N74", "400 ASA" },
};

const Keykode::FilmTypeEntry Keykode::agfaStockData[] =
{
	{ 20, "AN", "XT100", "" },
	{ 24, "AM", "XTR250",""},
	{ 83, "AF", "XT320",""},
	{ 84, "AS", "XTS400",""},
};

const Keykode::FilmTypeEntry Keykode::kodakStockData[] =
{
	{ 00, "KP", "600", "PRT 640T" },
	{ 14, "KX", "14", "SFX 200T" },
	{ 20, "KY", "20", "Primetime 640T" },
	{ 22, "KE", "22", "Double-X Black and White" },
	{ 24, "KL", "24", "4-X" },
	{ 31, "KH", "31", "Plus-X Black and White"""},
	{ 34, "KD", "34",""},
	{ 43, "KA", "43",""},
	{ 44, "KV", "44",""},
	{ 45, "KK", "45", "EXR 50D" },
	{ 46, "KI", "46", "Vision 250D" },
	{ 47, "KB", "47",""},
	{ 48, "KM", "48", "EXR 100T" },
	{ 49, "KO", "49",""},
	{ 72, "KS", "72", "Colour Internegative" },
	{ 74, "KZ", "74", "Vision 200T" },
	{ 77, "KQ", "77", "Vision 320T" },
	{ 79, "KU", "79", "Vision 500T" },
	{ 87, "KW", "87", "EXR 200T" },
	{ 89, "KR", "89", "Vision 800T" },
	{ 92, "KN", "92",""},
	{ 93, "KL", "93", "EXR 200T" },
	{ 94, "KG", "94",""},
	{ 95, "KF", "95",""},
	{ 96, "KJ", "96", "EXR 500T" },
	{ 97, "KC", "97",""},
	{ 98, "KT", "98", "EXR 250D" },
	{ 01, "EK", "01", "Vision2 50D" },
	{ 05, "EQ", "05", "Vision2 250D" },
	{ 07, "EN", "07", "Vision3 250D" },
	{ 12, "EM", "12", "Vision2 100T" },
	{ 13, "EO", "13", "Vision3 200T" },
	{ 17, "EL", "17", "Vision2 200T" },
	{ 18, "EH", "18", "Vision2 500T" },
	{ 19, "EJ", "19", "Vision3 500T" },
	{ 29, "EB", "29", "Vision2 Expression 500T" },
	{ 42, "EV", "42", "Vision Intermediate" },
	{ 54, "EW", "54", "Vision3 Intermediate" },
	{ 63, "EE", "63", "Vision 500T" },
	{ 65, "EC", "65", "Plus-X Black and White" },
	{ 66, "ED", "66", "Tri-X Black and White" },
	{ 84, "EG", "84", "Vision Expression 500T" },
	{ 85, "EA", "85", "Colour Reversal 100D" },
	{ 99, "EI", "99", "Vision2 HD Colour Scan" },
};

const Keykode::FilmTypeEntry Keykode::fujiStockData[] =
{
	{ 01, "FI", "01", "F-CI" },
	{ 02, "FI", "02", "F-CI" },
	{ 03, "FI", "03", "Eterna CI" },
	{ 10, "FN", "10", "F-64" },
	{ 11, "FI", "11", "Eterna RDI" },
	{ 13, "FI", "13", "FCI" },
	{ 14, "FN", "14", "F500" },
	{ 20, "FN", "20", "F64D" },
	{ 21, "FN", "21", "F-64D" },
	{ 22, "FN", "22", "F-64D" },
	{ 30, "FN", "30", "F-125" },
	{ 31, "FN", "31", "F-125" },
	{ 32, "FN", "32", "F-125" },
	{ 40, "FR", "40", "Velvia Colour Reversal" },
	{ 43, "FN", "43", "Eterna Vivid 160" },
	{ 46, "FN", "46", "Eterna Vivid 250D" },
	{ 47, "FN", "47", "Eterna Vivid 500" },
	{ 50, "FN", "50", "F250" },
	{ 51, "FN", "51", "F-250" },
	{ 52, "FN", "52", "F-250" },
	{ 53, "FN", "53", "Eterna 250" },
	{ 60, "FN", "60", "F250D" },
	{ 61, "FN", "61", "F-250D" },
	{ 62, "FN", "62", "F-250D" },
	{ 63, "FN", "63", "Eterna-250D" },
	{ 70, "FN", "70", "F-500" },
	{ 71, "FN", "70", "F-500" },
	{ 72, "FN", "71", "F-500" },
	{ 73, "FN", "73", "Eterna 500" },
	{ 82, "FN", "83", "F-400" },
	{ 83, "FN", "83", "Eterna 400" },
	{ 92, "FN", "92", "Reala 500D" },
};

const Keykode::FilmTypeEntry Keykode::unknownFilmTypeEntry =
{
	99, "", "", ""
};

bool Keykode::valid() const
{
	for (int i = 0; i < kRawBytesLength; i++)
	{
		if (m_rawBytes[i] == '\0')
			return false;
	}

	return true;
}

namespace
{
	int FilmCodeToInt(const char* in)
	{
		return ((in[1] - '0') * 10) + in[0] - '0';
	}
}

Keykode::FilmManufacturerEntry Keykode::findManufacturer() const
{
	int id = FilmCodeToInt(&m_rawBytes[14]);
	for (int n = 0; n < sizeof(manufacturerData) / sizeof(FilmManufacturerEntry); n++)
	{
		if (id == manufacturerData[n].id)
			return manufacturerData[n];
	}
	return unknownManufacturerEntry;
}

Keykode::FilmTypeEntry Keykode::findStock() const
{
	int id = FilmCodeToInt(&m_rawBytes[12]);

	switch (findManufacturer().manufacturer)
	{
		case kManufacturerORWO:
			for (int n = 0; n < sizeof(orwoStockData)/sizeof(FilmTypeEntry); n++)
			{
				if (id == orwoStockData[n].id)
					return orwoStockData[n];
			}
			break;
		case kManufacturerAGFA:
			for (int n = 0; n < sizeof(agfaStockData)/sizeof(FilmTypeEntry); n++)
			{
				if (id == agfaStockData[n].id)
					return agfaStockData[n];
			}
			break;
		case kManufacturerFUJI:
			for (int n = 0; n < sizeof(fujiStockData)/sizeof(FilmTypeEntry); n++)
			{
				if (id == fujiStockData[n].id)
					return fujiStockData[n];
			}
			break;
		case kManufacturerKodak:
			for (int n = 0; n < sizeof(kodakStockData)/sizeof(FilmTypeEntry); n++)
			{
				if (id == kodakStockData[n].id)
					return kodakStockData[n];
			}
			break;
		default:
			break;
	}
	return unknownFilmTypeEntry;
}

std::string Keykode::prefixString() const
{
	std::string		str;
	str += m_rawBytes[11];
	str += m_rawBytes[10];
	str += m_rawBytes[9];
	str += m_rawBytes[8];
	str += m_rawBytes[7];
	str += m_rawBytes[6];

	return str;
}

std::string Keykode::feetString() const
{
	std::string		str;
	str += m_rawBytes[5];
	str += m_rawBytes[4];
	str += m_rawBytes[3];
	str += m_rawBytes[2];

	return str;
}

std::string Keykode::perfString() const
{
	std::string		str;
	str += m_rawBytes[1];
	str += m_rawBytes[0];

	return str;
}

std::string Keykode::toString() const
{
	if (! valid())
		return "";

	return findStock().stockLetters + prefixString() + "-" + feetString() + "+" + perfString();;
}
