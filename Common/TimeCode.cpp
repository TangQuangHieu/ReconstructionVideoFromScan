/* -LICENSE-START-
** Copyright (c) 2021 Blackmagic Design
** Permission is hereby granted, free of charge, to any person or organization obtaining a copy
** of the software and accompanying documentation (the "Software") to use, reproduce,
** display, distribute, sub-license, execute, and transmit the Software, and to prepare
** derivative works of the Software, and to permit third-parties to whom the Software is
** furnished to do so, in accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License Agreement for
** the Software Development Kit (“EULA”) available at
** https://downloads.blackmagicdesign.com/EULA/Cintel/Cintel-End-User-License-Agreement.pdf; or
**
** (2) if the Software is obtained from any third party, such licensing terms as notified by
** that third party,
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement, including the above
** license grant, this restriction and the following disclaimer, must be included in all copies
** of the Software, in whole or in part, and all derivative works of the Software, unless
** such copies or derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
** DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
** TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
** OTHER DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/developer/product/cintel
**
** -LICENSE-END-
*/

#include "pch.h"
#include <stdexcept>
#include <cstdio>

#include "TimeCode.h"

// snprintf not supported in Visual Studio 2012
#ifdef _WIN32
#define snprintf	_snprintf_s
#endif

unsigned TimeCode::hours() const
{
	return ((frameCountBCD & 0xF0000000) >> 28) * 10 + ((frameCountBCD & 0x0F000000) >> 24);
}

unsigned TimeCode::minutes() const
{
	return ((frameCountBCD & 0x00F00000) >> 20) * 10 + ((frameCountBCD & 0x000F0000) >> 16);
}

unsigned TimeCode::seconds() const
{
	return ((frameCountBCD & 0x0000F000) >> 12) * 10 + ((frameCountBCD & 0x00000F00) >>  8);
}

unsigned TimeCode::frames() const
{
	return ((frameCountBCD & 0x000000F0) >>  4) * 10 + ((frameCountBCD & 0x0000000F));
}

TimeCode::TimeCode (unsigned frameCount, uint16_t filmFrameRate)
{
	unsigned			count = frameCount;

	// Calculate separate fields
	unsigned ff	= count % filmFrameRate;
	count /= filmFrameRate;
	unsigned ss	= count % 60;
	count /= 60;
	unsigned mm	= count % 60;
	count /= 60;
	unsigned hh	= count % 24;

	frameCountBCD =  ((((hh / 10) << 28) | ((hh % 10) << 24)) |
					  (((mm / 10) << 20) | ((mm % 10) << 16)) |
					  (((ss / 10) << 12) | ((ss % 10) << 8)) |
					  (((ff / 10) << 4)  | (ff % 10)));
}

TimeCode::TimeCode(const std::string& timecode)
{
	unsigned hh;
	unsigned mm;
	unsigned ss;
	unsigned ff;
	// Extract hours, minutes, seconds, frames from CRI timecode string ignoring the last element
	// which has no representation in a BCD timecode e.g. "01:23:45:23:24" -> 0x01234523
#ifdef _WIN32
	if (sscanf_s(timecode.c_str(), "%2u:%2u:%2u:%2u", &hh, &mm, &ss, &ff) != 4)
#else
	if (sscanf(timecode.c_str(), "%2u:%2u:%2u:%2u", &hh, &mm, &ss, &ff) != 4)
#endif
		throw std::runtime_error("Could not parse timecode string " + timecode);
	frameCountBCD =  ((((hh / 10) << 28) | ((hh % 10) << 24)) |
					  (((mm / 10) << 20) | ((mm % 10) << 16)) |
					  (((ss / 10) << 12) | ((ss % 10) << 8)) |
					  (((ff / 10) << 4) | (ff % 10)));
}

std::string TimeCode::toString(uint16_t filmFrameRate) const
{
	char timecodeString[21 + 1];			// worst case space if timecode and frame rate corrupt, plus NULL char
#if defined _MSC_VER && _MSC_VER <= 1900	// MSVC 2015+ started supporting standard C++ libraries
	_snprintf_s(timecodeString, sizeof(timecodeString), sizeof(timecodeString), "%02d:%02d:%02d:%02d:%02d", hours(), minutes(), seconds(), frames(), filmFrameRate);
#else
	snprintf(timecodeString, sizeof(timecodeString), "%02d:%02d:%02d:%02d:%02d", hours(), minutes(), seconds(), frames(), filmFrameRate);
#endif 
	return timecodeString;
}

unsigned TimeCode::toFrameCount(uint16_t filmFrameRate) const
{
	return ((((hours() * 60) + minutes()) * 60) + seconds()) * filmFrameRate + frames();
}

BMDScannerTimecodeBCD TimeCode::toBCD() const
{
	return frameCountBCD;
}

